buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'

dependencies {
    compile files('./lib/DragonAPI 1.7.10 V31b-deobf.jar') // Needs to be manually deobfuscated
    compile files('./lib/RotaryCraft 1.7.10 V31b.jar')
    compile files('./lib/ReactorCraft 1.7.10 V31b.jar')
}

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = config.group
archivesBaseName = config.name + " " + config.mc_version + " " + config.version

minecraft {
    version = config.mc_version + "-" + config.forge_version
    runDir = "run"

    replace "@MODID@", config.modid
    replaceIn "ExampleMod.java"

    replace "@VERSION@", config.version
    replaceIn "ExampleMod.java"

    replace "@DEPENDENCIES@", config.dependencies
    replaceIn "ExampleMod.java"
}

processResources {
    inputs.property "modid", config.modid
    inputs.property "name", config.name
    inputs.property "version", config.version
    inputs.property "mc_version", config.mc_version
    inputs.property "authorList", config.authorList
    inputs.property "credits", config.credits
    inputs.property "description", config.description
    inputs.property "url", config.url
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "modid":config.modid, "name":config.name, "version":config.version, "mc_version":project.minecraft.version, "authorList":config.authorList, "credits":config.credits, "description":config.description, "url":config.url
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

artifacts {
    archives sourceJar, devJar
}